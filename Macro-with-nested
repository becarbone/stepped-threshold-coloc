//made by Bea Carbone - 2017

var sourcedir, sourceList, color, channel, punctadir, thresholddir, resultsdir;
var nameArray, ROIareaArray, ROIpunctaArray,condition, filename, title, Num, are;
var number, area, shortTitle, tempTitle, Intens;

//choosing the source folder w/subfolders (automatically lists names of folders in results) 
//images should be single channel chosen ROI that were taken at 1048x1048 for appropriate sizing of puncta
//choosing the color of the channels, mostly for labeling's sake
run("Set Measurements...", "area mean min integrated area_fraction limit redirect=None decimal=3");
waitForUser("This macro needs several folders: \n-one for each of the separate channel images\n-an empty one for the puncta \n-an empty one for masks \n \n -Files need to be single channel images-");
Dialog.create("How many channels?");
	Dialog.addNumber("# of channels",2);
Dialog.show;
numberChannels = Dialog.getNumber();
markerArray = newArray();

Dialog.create("What markers?");
	for(s=0;s<numberChannels;s++){
		Dialog.addString("Channel"+(s+1),"antibody");
	}
Dialog.show;

for(s=0;s<numberChannels;s++){
	marker = Dialog.getString();
	markerArray = Array.concat(markerArray,marker);
}

sourceArray = newArray();

Dialog.create("");
	color = newArray("Green", "Red", "Blue", "Cyan");
	for(s=0;s<numberChannels;s++){
		Dialog.addChoice(markerArray[s]+ " color", color, color[s]);
	}
Dialog.show;

colorArray = newArray();
for(s=0;s<numberChannels;s++){
	channel = Dialog.getChoice();
	colorArray = Array.concat(colorArray,channel);
}

for(s=0;s<numberChannels;s++){
	//sourcedir is the folder for the images in each channel
	sourcedir = getDirectory("Choose folder for marker "+markerArray[s]+" ("+ colorArray[s] +") images");
	sourceArray = Array.concat(sourceArray, sourcedir);
}
sourceList = getFileList(sourcedir);

//choosing folders for results output - the same output for all conditions to avoid needing to 
//pull some extra menu bullshit in creating subfolders
punctaArray = newArray();
maskArray = newArray();

for(s=0;s<numberChannels;s++){
	punctadir = getDirectory("Choose folder for "+markerArray[s]+" ("+ colorArray[s] +") puncta");
	subpunctaArray = newArray();
	for(o=0;o<sourceList.length;o++){
		File.makeDirectory(punctadir+sourceList[o]);
	}
	sublist = getFileList(punctadir);
	subpunctaArray = Array.concat(subpunctaArray,sublist);
	Array.show(subpunctaArray);
	punctaArray = Array.concat(punctaArray,punctadir);
	submaskArray = newArray();
	maskdir = getDirectory("Choose folder for "+markerArray[s]+" ("+ colorArray[s] +") masks");
	for(o=0;o<sourceList.length;o++){
		File.makeDirectory(maskdir+sourceList[o]);
	}
	sublist = getFileList(maskdir);
	submaskArray = Array.concat(submaskArray,sublist);
	maskArray = Array.concat(maskArray,maskdir);
}
Array.show(submaskArray);
resultsdir = getDirectory("Choose folder for excel files");

l = "thresholding";
for(t=20;t<125;t+=5) {
	l = l +"	" + t;
}
l=l+"	";

//the "meat" starts here
//goal: to assess the # and area of puncta at threshold intervals of 3 to a maximum of 159/255
//and try to present it in a way that allows for easy analysis of data.
//The final presentation of data should be brought into graphpad on an XvY graph of puncta(axis1) and area(axis2), to find
//a threshold point post-spike of the area and pre-spike or mid-spike of puncta count that reliably
//indicates the approximate description of the ROI it references.
for(s=0;s<numberChannels;s++)	{
	ROIString = sourceArray[s] +"\n"+l+"	"+l+"	"+l+"	Area of ROI\n";
	tempList = getFileList(sourceArray[s]);
	for(n=0;n<tempList.length;n++)	{
		ROIString = ROIString+sourceList[n]+"\n";
		print(ROIString);
		condition = getFileList(tempList[n]);
		//gotta adapt this so it handles nested folders
		for (i=0;i<condition.length; i++) {
			filename = condition[i];
			Dialog.create("Areas of ROI");
				for(r=0;r<tempList.length;r++)	{
				Dialog.addNumber(condition[r],1);
			}
			Dialog.show();
			areaArray = newArray();
			for(r=0;r<tempList.length;r++)	{
				areaArray = Array.concat(areaArray,Dialog.getNumber());
			}	
			open(sourceArray[s]+tempList[i]);
			title = getTitle();
			run("Properties...", "channels=1 slices=1 frames=1 unit=micron pixel_width=0.1201914 pixel_height=0.1201914 voxel_depth=1.0000000");
			run("Gaussian Blur...", "sigma=1");
			setColor("Magenta");
			are = "area_"+title;		
			Num = "raw_"+title;
			norm = "puncta/area_"+title;
			int = "intensity_"+title;
			shortTitle = substring(title,0, lengthOf(title)-4);
			for(t=20;t<125;t+=5) {
				selectImage(title);
				nameArray = Array.concat(nameArray, title+"_"+t);
				//for the definition of the mask function - see the bottom of the code
				mask();
				are = are + "	" + area;
				Num = Num + "	" + number;
				norm = norm + "	" + (number/areaArray[i]);
				int = int + "	"+ Intens;
				}
			ROIString = ROIString + are +"		"+ Num +"		"+norm+"		"+int+"		"+areaArray[i]+"\n";
			selectImage(title);
			close();
			selectWindow(title+"_"+colorArray[s]+20+"_mask");
			run("Select None");
			setSlice(1);
			run("Label...", "format=Label starting=0 interval=1 x=5 y=5 font=8 text=[] range=1-51 use");
			saveAs("Tiff",maskArray[s]+shortTitle);
			close();
	
		}
	}
	print(ROIString);
	File.saveString(ROIString, resultsdir+markerArray[s]+" ("+ colorArray[s] +").xls");
}

if(numberChannels == 2)	{
	punctaList1 = getFileList(punctaArray[0]);
	punctaList2 = getFileList(punctaArray[1]);
	maskList1 = getFileList(maskArray[0]);
	maskList2 = getFileList(maskArray[1]);

	colocString = "Colocalization\n"+l+"	"+l+"	"+l+"	"+l+"	\n";

	for(n=0;n<maskList1.length;n++)	{
		subpunctaList1 = getFileList(maskList1[n]);
		subpunctaList2 = getFileList(maskList2[n]);
		submaskList1 = getFileList(punctaList1[n]);
		submaskList2 = getFileList(punctaList2[n]);
		for(t=0;t<submaskList1;t++)	{
			title = File.getName(submaskList1[t]);
			shortTitle = substring(title,0,lengthOf(title)-(lengthOf(colorArray[0])+5));
			open(maskArray[0]+maskList1[n]);
			run("Stack to Images");
			selectImage(shortTitle+"_"+colorArray[0]+"-0001");
			rename(shortTitle+"_"+colorArray[0]+"_"+20);
	
			oneTwo = colorArray[1]+"ROI/mask"+colorArray[0]+"_"+shortTitle;
			oneNorm = "norm-"+colorArray[1]+"ROI/mask"+colorArray[0]+"_"+shortTitle;
			t=20;
			while(t<125) {
				roiManager("reset");
				run("Clear Results");
				selectImage(shortTitle+"_"+colorArray[0]+"_"+t);
				title = getTitle();
				ROI = "ROI_"+shortTitle+"_"+colorArray[1]+"_"+t+".zip";
				if(File.exists(punctaArray[1]+ROI) == 1)	{
					roiManager("open", punctaArray[1]+ROI);
					roiManager("measure");
					oneTwoCount = 0;
					for(i=0;i<roiManager("Count");i++) {
						if(getResult("%Area",i) >= 25) {
							oneTwoCount = oneTwoCount+1;
						}
					}
				}
				else {
					oneTwo = oneTwo +"	0";
				}
				oneTwo = oneTwo +"	"+oneTwoCount;
				oneNorm = oneNorm +"	"+(oneTwoCount/areaArray[n]);
				t = t+5;
				selectImage(title);
				close();
			}
	
			open(maskArray[1]+maskList2[n]);
			run("Stack to Images");
			selectImage(shortTitle+"_"+colorArray[1]+"-0001");
			rename(shortTitle+"_"+colorArray[1]+"_"+20);
	
			twoOne = colorArray[0]+"ROI/mask"+colorArray[1]+"_"+shortTitle; 
			twoNorm = "norm-"+colorArray[0]+"ROI/mask"+colorArray[1]+"_"+shortTitle;
			t=20;
			while(t<125) {	
				roiManager("reset");
				run("Clear Results");
				selectImage(shortTitle+"_"+colorArray[1]+"_"+t);
				title = getTitle();
				ROI = "ROI_"+shortTitle+"_"+colorArray[0]+"_"+t+".zip";
				if(File.exists(punctaArray[0]+ROI) == 1)	{
					roiManager("open", punctaArray[0]+ROI);
					roiManager("measure");
					twoOneCount = 0;
					for(i=0;i<roiManager("Count");i++) {
						if(getResult("%Area",i) >= 25) {
							twoOneCount = twoOneCount+1;
						}
					}
				}
				else {
					twoOne = twoOne +"	0";
				}
				twoOne = twoOne +"	"+twoOneCount;
				twoNorm = twoNorm +"	"+(twoOneCount/areaArray[n]);
				t = t+5;
				selectImage(title);
				close();
				
			}
			colocString = colocString + oneTwo +"		"+ twoOne +"		"+ oneNorm +"		"+ twoNorm +"\n";
			open(maskArray[0]+maskList1[n]);
			open(maskArray[1]+maskList2[n]);
			if(colorArray[1] == "Red") {
				run("Merge Channels...", "c1="+maskList2[n]+" c2="+maskList1[n]+" create");
			}
			else {
				run("Merge Channels...", "c1="+maskList1[n]+" c2="+maskList2[n]+" create");
			}
			selectImage("Composite");
			saveAs("Tiff",resultsdir+shortTitle+"_coloc");
			close();}
	}
	print(colocString);
}
else {
	print("There are "+numberChannels+" channels, need 2 for colocalization");
}
File.saveString(colocString, resultsdir+"Colocalization.xls");


//Referenced functions are relegated to the end of the code

function mask() {
	tempTitle = getTitle();
	run("Clear Results");
	run("Threshold...");
	setAutoThreshold("Default dark");
	setThreshold(t,255);
	selectWindow(tempTitle);
	run("Find Maxima...", "noise=7.5 output=[Segmented Particles] above");
	selectImage(tempTitle+" Segmented");
	run("Watershed");
	run("Analyze Particles...", "size=1-100 pixel show=Masks add");
	number = roiManager("count");
	roiManager("Measure");
	area = 0;
	if(roiManager("count")>0) {
		roiManager("Save",punctaArray[s]+"ROI_"+shortTitle+"_"+t+".zip");
		for(j=0;j<nResults;j++) {
			area = area + getResult("Area",j);
			Intens = Intens + getResult("IntDen");
		}
		area = area/nResults;
		Intens = Intens/nResults;
	}
	roiManager("reset");
	selectImage("Mask of "+tempTitle+" Segmented"); 
	rename(title+"_"+colorArray[s]+t+"_mask");
	selectImage(tempTitle+" Segmented");
	close();
	if(t>20){
		selectImage(title+"_"+colorArray[s]+t+"_mask");
		run("Select All");
		run("Copy");
		close();
		selectImage(title+"_"+colorArray[s]+20+"_mask");
		run("Add Slice");
		setSlice(nSlices);
		shortTitle = substring(title,0, lengthOf(title)-4);
		selectImage(title+"_"+colorArray[s]+20+"_mask");
		run("Set Label...", "label="+shortTitle+"_"+t);
		run("Paste");
	}
}
